[{"title":"JavaSE基础","date":"2023-10-30T10:49:40.000Z","url":"/2023/10/30/JavaSE%E5%9F%BA%E7%A1%80/","categories":[["undefined",""]],"content":" JavaSE基础 一. Java基础 1. Java介绍 Java是什么 Java是美国 Sun 公司（Stanford University Network） 在1995年推出的计算机编程语言，后被Oracle公司收购。 Java 早期称为Oak(橡树)，后期改名为Java。 Java 之父：詹姆斯·高斯林（James Gosling）。 为什么用Java 世界上最流行的编程语言之一,在国内使用最为广泛的编程语言。 可移植性，安全可靠，性能较好。 开发社区最完善，功能最为丰富。 Java能做什么 桌面应用开发—各种税务管理软件，IDEA 企业级应用开发—微服务，大型互联网应用 移动应用开发—Android，医疗设备 服务器系统—应用的后台 大数据开发—hadoop 游戏开发—我的世界 MineCraft Java技术体系平台 技术平台 说明 Java SE(Java Standard Edition) 标准版 Java技术的核心和基础，是学习Java EE，JavaME的基础，支持开发桌面级应用（如Windows下的应用程序）的Java平台 Java EE(Java Enterprise Edition)企业版 为开发企业环境下的应用程序提供的一套解决方案，主要针对于Web应用程序开发，多用于大型网站开发。 Java ME(Java Micro Edition)小型版 是为机顶盒、移动电话和PDA之类嵌入式消费电子设备提供的Java语言平台，现在移动终端基本上都是使用Android和IOS的技术平台了。 Java Card 支持一些Java小程序（Applets）运行在小内存设备（如智能卡）上的平台 ，此技术也被广泛运用在SIM卡、提款卡上。 2. Java快速入门 1) JDK介绍、安装 如何使用Java Java语言的产品是 JDK（Java Development Kit ：Java开发者工具包) ，必须安装JDK才能使用Java语言。 JDK产品的发展史 如何获取JDK 去Oracle官网下载JDK。 JDK提供了编译和执行Java程序的工具 命令行窗口 按下 Win + R ，在运行输入框中，输入cmd，敲回车。 在命令行 窗口中直接输入javac –version 及 java –version分别看版本提示，如果版本提示都是自己安装的版本号，则代表JDK环境搭建成功。 其他常用命令行命令 常用命令 作用 D: C: 切换到某个盘下 dir 查看当前路径下的全部内容 cd 目录 进入单级目录: cd itheima cd 盘符:\\目录1\\目录2… 进入多级目录: cd C:\\itheima\\JavaSE\\第一天 cd … 回退到上一级目录 cd \\ 回退到盘符目录 cls 清屏 exit 退出命令提示符窗口 总结 Java的产品叫什么? 去哪里下载安装? JDK （Java Development Kit ) 开发工具包、Oracle官网 安装JDK有哪些要求？ 不要安装在有空格或中文名称的路径下。 Java开发环境最重要的2个命令是什么啊？ javac 编译命令、java 执行命令。 想直接访问这2个命令，得在哪个窗口下访问？ 命令行窗口。 命令行窗口中常用的命令有哪些？ 切换盘符、dir、cd、cd… 、cd 路径 、cls 2) Java入门程序-HelloWorld Java 程序开发的三个步骤 开发 Java 程序，需要三个步骤：编写代码，编译代码，运行代码 注意事项: 第一个Java程序建议使用记事本书写。 建议代码文件名全英文，首字母大写，满足驼峰模式，源代码文件的后缀必须是.java 。 编写代码 第一个程序的代码如下： 注意：文件名称必须与代码中的类名一致。 编译代码，运行代码 ​ ① 编译：javac 文件名.java ​ ② 运行：java 类名 HelloWorld程序介绍 总结 开发一个Java程序要经历哪些步骤？ 编写、编译(javac)、运行(java) Java代码编写有什么基本要求？ 文件名称的后缀必须是java结尾。 文件名称必须与代码的类名称一致。 必须使用英文模式下的符号。 3) HelloWorld程序常见问题 HelloWorld案例常见错误 扩展名被隐藏。 文件名和类名不一致。 大小写错误，单词拼写错误，存在中文符号，找不到main方法。 括号不配对。 编译或者执行命令使用不当。 4) Java程序的执行原理 Java是什么？ Java是一种高级编程语言。 什么是高级编程语言呢？ 就是编写的一些接近人类语言的指令，告诉机器该怎么做。 计算机怎么理解Java写好的这些指令的？ 计算机能识别的指令是什么样的？ 由于计算机底层都是硬件电路，可以理解成开关，开表示0，关表示1，机器指令就是一个一个的二进制串。 计算机中会内置一些机器指令，代表具备的功能。 早期的编程形式是什么样的？ 编程语言发展历程 机器语言 汇编语言 高级语言 为什么学习高级编程语言？ 更简单：使用人类自己的语言书写，翻译器再将其翻译成计算机能理解的指令。 总结 Java语言最终是如何去控制计算机执行的？ Java语言存在编译器和执行器 最终可以编译、解释成计算机可以识别的机器指令。 5) JDK、JRE、跨平台原理 JDK 、JRE的关系 ![JDK 、JRE的关系](./JavaSE基础/JDK 、JRE的关系.png) JVM（Java Virtual Machine）：Java虚拟机, 真正运行Java程序的地方。 JDK（Java Development Kit）: Java开发工具，包含java编译器、java虚似机、以及java帮我们写好的程序…等所有需要的东西。 JRE（Java Runtime Environment）: Java运行时环境，只包含java虚似机、以及java帮我们写好的程序等java运行所需的东西。 结论： 我们现阶段只要安装了JDK即可拥有java程序开发和运行需要的全部环境。 如果是在企业的部署环境下，其实只需要安装JRE就可以运行编译好的Java程序了。 跨平台工作原理 一次编译，处处可用。 总结 JDK和JRE的关系是什么样的？ JDK中会关联JRE。 JDK中会关联JRE。 JRE中只包含了：java、jvm和核心类库等Java的运行环境。 Java的跨平台是什么含义，如何实现的？ 一次编译、处处可用 不同平台有对应的JRE环境。 6) JDK安装时Path环境变量的注意 Path环境变量的作用 Path环境变量是用来配置命令的路径的，这样可以在命令行窗口中的任何位置直接使用这些命令。 JDK安装时Path需要注意的事项： 目前较新的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。 但是以前下载的老版本的JDK是没有自动配置的，此时必需要自己配置Path环境变量。 环境变量的位置在：我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量。 建议还是自己配置环境变量 ​ ① JAVA_HOME：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK） ​ ② Path：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置 ​ 注意：新版本的JDK只是自动配置了Path，没有自动配置JAVA_HOME。 如何检测是否配置成功 打开cmd，输入javac –version 及 java –version分别看版本提示。 如果版本提示都是自己安装的版本号，则代表JDK环境搭建成功。 总结 什么是Path环境变量？ 在操作系统中配置的命令路径，实现在系统中直接访问命令。 JDK安装时，环境变量需要注意什么？ 较新版本的JDK会自动配置PATH环境变量。 建议自己置“JAVA_HOME”、“Path” 3. IDEA开发工具的使用 1) IntelliJ IDEA 开发工具概述、安装 之前的开发工具 文本编辑工具: 记事本 、 UltraEdit 、 EditPlus 、 TextPad 、 NotePad++、sublime… 存在的问题：编写代码时没有错误提醒、没有智能提示、需要自己进行编译、执行。功能不够强大。 集成开发环境（ IDE, Integrated Development Environment ） 把代码编写，编译，执行等多种功能综合到一起的开发工具，可以进行代码智能提示，错误提醒，项目管理等等。 常见Java的IDE工具有：Eclipse、MyEclipse、IntelliJ IDEA、Jbuilder、NetBeans等。 IntelliJ IDEA开发工具 IntelliJ IDEA 一般简称IDEA，是Java编程语言开发的集成环境，在业界被公认为最好的java开发工具。 IDEA 在代码错误提醒，智能代码补全等多方面表现的都非常优秀，是Java开发企业级首选工具。 IDEA 下载 下载： 安装：傻瓜式安装，建议修改安装路径（不要安装在有空格和中文的路径下）。 2) IDEA 编写第一个程序 IDEA项目结构介绍 project（项目、工程） module（模块） package（包） class（类） ​ 结论：这些结构的划分，是为了方便管理项目技术和代码文件的 使用步骤： 创建Project空工程 创建Module模块 创建Package包 创建class 类 在类中编写代码 完成编译运行 总结 IDEA的结构都是什么样的？ project - module - package – class project中可以创建多个module module中可以创建多个package package中可以创建多个class 新建都是哪些操作 New project/module/package/class 4) IDEA 字体、主题、背景色设置 IDEA 中设置主题、字体 5) IDEA常用快捷键介绍 快捷键 功能效果 main/psvm、sout、… 快速键入相关代码 Ctrl + D 复制当前行数据到下一行 Ctrl + Y 删除所在行，建议用Ctrl + X Ctrl + ALT + L 格式化代码 ALT + SHIFT + ↑ , ALT + SHIFT + ↓ 上下移动当前代码 Ctrl + / , Ctrl + Shift + / 对代码进行注释 6) IDEA工程、模块常用操作 IDEA 中其他操作 删除类文件 修改类名称 修改模块 导入模块 删除模块 打开工程 关闭工程 4. Java基础语法 1) 注释 什么是注释 在程序中对代码进行解释说明的文字，方便自己和其他人理解、查看，不会影响程序的正常执行。 注释有哪些 单行注释 多行注释 文档注释: 一般用在类和方法上的注释 快捷键进行注释 快捷键进行注释 Ctrl + / 单行注释。 Ctrl + Shift + / 选中代码进行多行注释。 2) 字面量 字面量 告诉程序员，数据在程序中的书写格式。 字面量分类 字面量分类 生活中的写法 程序中的写法 说明 整数 666，-88 666，-88 程序中的写法与生活中写法一致 小数 13.14，-5.21 13.14，-5.21 程序中的写法与生活中写法一致 字符 A, 0, 我 A’，‘0’， ‘我’ 程序中必须使用单引号，有且仅能一个字符 字符串 世界真美 “HelloWorld” 程序中必须使用双引号，内容可有可无 布尔值 true、false true 、false 布尔值，表示真假，只有两个值：true，false 空值 值是：null 一个特殊的值，空值 总结 字符、字符串的字面量的格式要求？ 字符必须单引号围起来，有且仅能一个字符。 字符串必须用双引号围起来。 布尔类型只有2个值：false 、true 3) 变量 什么是变量 变量就是用来存储一个数据的内存区域（可以理解成盒子），且里面存储的数据可以变化。 变量定义的格式 修改变量中存储的值 总结 变量的作用？ 存储一个数据的，可以改变里面存储的数据。 变量的格式 数据类型 变量名称 = 初始值； 4) 变量使用注意事项 定义变量需要注意的几个问题 某个变量存储了其他类型的数据。 变量的有效范围是从定义开始到“}”截止,同一个范围内部不能定义2个同名的变量。 变量定义的时候可以没有初始值，但是使用的时候必须给初始值。 总结 变量定义有哪些注意点？ 什么类型变量存储什么类型的字面值。 同一个范围变量名不能重复 变量在使用时要有初始值 变量存在访问范围 5) 数据的存储形式：二进制 二进制 计算机底层都是一些数字电路(理解成开关)，用开表示0、关表示1，这些01的形式就是二进制。 数据在计算机底层都是采用二进制存储的。 二进制具体如何表示数据的 一个开关的状态 01 两个开关的状态 00 01 10 11 三个开关的状态 000 001 010 011 100 101 110 111 开关越多,能够表示的数据也越多。 二进制转换成十进制的运算方式 计算机的数据单位 在计算机中认为一个开关表示的0|1称为1位（b），每8位称为一个字节（B）， 所以1B=8b。 字节是计算机中数据的最小单位。 总结 数据在计算机底层都是怎么存储的？ 都是采用二进制：就是0、1表示的数据形式。 数据在计算机中存储的最基本单位是什么？ 字节 数据单位换算是什么样的？ 6) 数据类型 数据类型的作用 数据类型就是约束变量存储数据的形式。 数据类型的分类 引用数据类型（除基本数据类型之外的，如String） 基本数据类型：4大类8种。 数据类型 关键字 取值范围 内存占用（字节数） 整数 byte -128~127 1 整数 short -32768~32767 2 整数 int(默认) -2147483648~2147483647 (10位数) 4 整数 long -9223372036854775808 ~ 9223372036854775807 (19位数) 8 浮点数 float 1.401298e-45到3.402823e+38 4 浮点数 double（默认） 4.9000000e-324 到1.797693e+308 8 字符 char 0-65535 2 布尔 boolean true，false 1 数据类型定义变量的几个补充知识点 随便写一个整数字面值，默认是int类型的，如果希望随便写一个整数默认是long型的必须在数据后加L或者l表示。 随便写一个小数字面值，默认是double类型的，如果希望这个小数是float类型的，必须在数据后加F或者f表示。 总结： 数据类型分为几种？ 引用数据类型:String 基本数据类型：4大类8种。 **byte short ** int(默认) long 整型 float double(默认) 浮点型 char 字符型 boolean 布尔型 随便写的整数、小数字面值默认什么类型？ 23 ，默认是int类型 , 加上L/l就是long类型的数据了。 23.8，默认是double类型，加上F/f就是float类型了。 7) ASCII编码 ASCII (American Standard Code for Information Interchange) 美国信息交换标准编码，就是一套现代英语、数字、和其他西欧字符（不含中文）的编号规则。 字符在计算机底层就是存储其编号的二进制形式。 字符 十进制 二进制 A 65 0100 0001 B 66 0100 0010 a 97 0110 0001 b 98 0110 0010 0 48 0011 0000 总结 字符在计算机底层是怎么存储的？ 存储的是二进制的形式。 ASCII编码是什么？ 对如英文字符进行编号的规则，规定英文等字符在底层存储的二进制形式。 8) 关键字、标志符 关键字 Java自己保留的一些单词，作为特殊功能的，例如：public、class、byte、short、int、long、double… 我们不能用来作为类名或者是变量名称，否则报错。 注意：关键字很多，不用刻意去记。 abstract assert boolean break byte case catch char class const continue default do double else enum extends final finally float for goto if implements import instanceof int interface long native new package private protected public return strictfp short static super switch synchronized this throw throws transient try void volatile while 标识符 标志符就是由一些字符、符号组合起来的名称，用于给类，方法，变量等起名字的规矩。 标识符的要求 基本要求：由数字、字母、下划线(_)和美元符($)等组成 强制要求：不能以数字开头、不能是关键字、区分大小写 命名指导规范 变量名称：满足标识符规则，建议全英文、有意义、首字母小写，满足“驼峰模式”，例如：int studyNumber = 59。 满足标识符规则，建议全英文、有意义、首字母大写，满足“驼峰模式”，例如：HelloWorld.java。 总结： 关键字的特点 Java自己保留的，我们不能用来取名字。 标识符 取名字的规则，数字，字母，下划线，美元符等组成。 数字不能开头，不能是关键字。 "},{"title":"移动Web网页开发","date":"2023-10-27T05:28:47.000Z","url":"/2023/10/27/%E7%A7%BB%E5%8A%A8Web%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/","categories":[["undefined",""]],"content":" 移动Web网页开发 一.移动端特点 1.移动端和PC端网页不同点 PC屏幕大，网页固定版心 手机屏幕小，网页宽度多数为100% 2.分辨率 屏幕尺寸 指的是屏幕对角线的长度，一般用英寸来度量 PC分辨率 1920 * 1080 1366 * 768 … 缩放150% （1920/150%）* (1080/150%) 总结 硬件分辨率（出厂设置） 缩放调节的分辨率(软件设置) 分辨率分类 物理分辨率是生产屏幕时就固定的，它是不可被改变的 逻辑分辨率是由软件(驱动)决定的 制作网页参考逻辑分辨率 了解移动端主流设备分辨率 3.视口 视口：显示HTML网页的区域，用来约束HTML尺寸 使用meta标签设置视口宽度，制作适配不同设备宽度的网页 手机屏幕尺寸都不同，网页宽度为100% 网页的宽度和逻辑分辨率尺寸相同 默认情况下，网页的宽度和逻辑分辨率不相同，默认网页宽度是980px 添加视口标签，使网页宽度和设备宽度(分辨率)相同 viewport: 视图 width=device-width: 视口宽度 = 设备宽度 inital-scale=1.0: 缩放1倍(不缩放) 4.二倍图 使用二倍图，为了高分辨率下图片不会模糊失真 现阶段设计稿参考iPone6/7/8，设备宽度375px产出设计稿 二倍图设计稿尺寸： 750px 二.百分比布局 百分比布局，也叫流式布局 效果： 宽度自适应，高度固定 通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。 流式布局方式是移动web开发使用的比较常见的布局方式。 常用属性： max-width 最大宽度 （max-height 最大高度） min-width 最小宽度 （min-height 最小高度） 三.Flex布局 思考： 多个盒子横向排列使用什么属性？ 浮动 设置盒子间的间距使用什么属性？ margin 需要注意什么问题？ 浮动的盒子脱标 Flex布局/弹性布局： 是一种浏览器提倡的布局模型 布局网页更简单，灵活 避免浮动脱标的问题 作用 基于Flex精确灵活控制块级盒子的布局方式，避免浮动布局中脱离文档流现象发生 Flex布局非常适合结构化布局 设置方式 父元素添加==display:flex==,子元素可以自动的挤压或拉伸 组成部分 弹性容器 弹性盒子 主轴 侧轴/交叉轴 使用justify-content调节元素在主轴的对齐方法 使用align-items调节元素在侧轴的对齐方式 修改侧轴对齐方式属性： align-items(添加到弹性容器) align-self: 控制某个弹性盒子在侧轴的对齐方式(添加到弹性盒子) 使用flex属性修改弹性盒子的伸缩比 属性 flex：值 取值分类 数值(整数) 注意：只占用父盒子剩余尺寸 使用flex-direction改变元素排列方向(主轴方向) Flex布局模型中，弹性盒子默认沿着水平方向排列 主轴默认是水平方向，侧轴默认是垂直方向 修改主轴方向属性：flex-direction 使用flex-wrap实现弹性盒子多行排列效果 弹性盒子换行显示: flex-wrap: wrap; 调整行对齐方式: align-content 取值与justify-content基本相同 四.移动适配 1.rem 现象 适配方案 rem: 目前多数企业在用的解决方案 vw/vh: 未来的解决方案 rem 媒体查询 flexible.js rem单位 相对单位，px单位是绝对单位 rem单位是相对于HTML标签的字号计算结果 1rem = 1HTML字号大小 思考： 手机屏幕大小不同，分辨率不同，如何设置不同的HTML标签字号？ 媒体查询 媒体查询能够检测视口的宽度，然后编写差异化的CSS样式 当某个条件成立，执行对应的CSS样式 写法： 思考： 设备宽度不同，HTML标签字号设置多少合适？ 设备宽度大，元素尺度大 设备宽度小，元素尺度小 目前rem布局方案中，将网页等分成10份，HTML标签的字号为视口宽度的1/10 思考： 工作中，书写代码的尺寸要参照设计稿尺寸，设计稿中是px还是rem？ 设计稿中是px 如何确定rem的数值？ **rem单位的尺寸 = **px单位数值 / 基准根字号 rem单位尺寸 根据视口宽度，设置不同的HTML标签字号 书写代码，尺寸是rem单位 2.1 确定设计稿对应的设备的HTML标签字号 查看设计稿宽度 —&gt; 确定参考设备宽度(视口宽度) —&gt; 确定基准根字号(1/10视口宽度) 2.2 rem单位的尺寸 N * 37.5 = 68 —&gt; N = 68 / 37.5 rem单位的尺寸 = px单位数值 / 基准根字号 使用flexible.js配合rem实现在不同宽度的设备中，网页元素尺寸等比缩放效果 思考：咱们检测了3个视口，分别设置了根字号，有什么弊端呢？ 答：手机设备多，屏幕尺寸不一，视口不仅仅有这3个 flexible.js是手淘开发出的一个用来适配移动端的js框架 核心原理就是根据不同的视口宽度给网页中html根节点设置不同的font-size 2.less 使用Less运算写法完成px单位到rem单位的转换 思考：在px单位转换到rem单位过程中，哪项工作是最麻烦的？ 答：除法运算。 CSS不支持计算写法 解决方案：可以通过Less实现 使用Less语法快速编译生成CSS代码 Less是一个CSS预处理器，Less文件后缀是==.less== 扩充了CSS语言，使CSS具备一定的逻辑性，计算能力 注意：浏览器不识别Less代码，目前阶段，网页要引入对应的CSS文件 Easy Less: vscode插件 作用：less文件保存自动生成css文件 注释： 单行注释 语法：//注释内容 快捷键：ctrl + / 块注释 语法：/*注释内容*/ 快捷键：shift + alt + A 使用Less运算写法完成px单位到rem单位的转换 运算： 加，减，乘直接书写计算表达式 除法需要添加小括号 或 . 注意：表达式存在多个单位以第一个单位为准 使用Less嵌套写法生成后代选择器 嵌套： 作用：快速生成后代选择器 语法： 注意：&amp; 不生成后代选择器，表示当前选择器，通常配合伪类或伪元素使用 使用Less变量设置属性值 变量 作用：存储数据，方便使用和修改 语法： 定义变量：@变量名：值； 使用变量：CSS属性：@变量名； 使用Less导入写法引用其他Less文件(在less文件导入其它less文件) 开发网站时，网页如何引入公共样式？ CSS：书写link标签 Less：导入 导入：@import “文件路径”; 使用Less语法导出CSS文件 方法一： 配置EasyLess插件，实现所有Less有相同的导出路径 具体实现：设置—&gt;搜索EasyLess—&gt;在setting.json中编辑—&gt;添加代码(注意，必须是双引号) 方法二： 控制当前Less文件导出路径 Less文件第一行添加如下代码，注意文件夹名称后面添加 / 禁止导出 在less文件第一行添加： // out: false 3.rem&amp;less实战演练 rem简单使用 使用媒体查询，根据不同的视口宽度，设置不同的根字号 注意：如果电脑分辨率是1920放大125或者150倍.不能得到整数分辨率(算出来是小数)，那么媒体查询检测不出来 方案：把电脑缩放比设置成100%(后面有方案解决) flexible移动适配 Less-体验 Less-变量 Less-导出-单独路径 index.less 文件导入基本样式 根字号变量 4.vw/vh 使用vw单位设置网页元素的尺寸 是相对单位 相对视口的尺寸计算结果 vw: viewport width 1vw = 1/100视口宽度 vh: viewport height 1vh = 1/100视口高度 vw单位尺寸 确定设计稿对应的vw尺寸(1/100视口宽度) 查看设计稿宽度—&gt;确定参考设备宽度(视口宽度)—&gt;确定vw尺寸(1/100视口宽度) vw单位的尺寸 = px单位数值 / (1/100视口宽度) vh单位尺寸 确定设计稿对应的vh尺寸(1/100视口高度) 查看设计稿高度—&gt;确定参考设备高度(视口高度)—&gt;确定vh尺寸(1/100视口高度) vh单位的尺寸 = px单位数值 / (1/100视口高度) 思考：开发中，会不会vw和vh混用呢？ 不会 vh是1/100视口高度，全面屏视口高度尺寸大，如果混用可能会导致盒子变形 5.vw/vh实战演练 vw-体验 vh-体验 vw-移动适配 vw/vh应用 五.总结 rem(市场比较常见)： 需要不断修改html文字大小 需要媒体查询media 需要 flexible.js vw/vh(将来趋势): 省去各种判断和修改 代表：B站… "},{"title":"解决Hexo无法显示图片的方案","date":"2023-10-23T15:07:51.000Z","url":"/2023/10/23/%E8%A7%A3%E5%86%B3Hexo%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%A1%88/","categories":[["undefined",""]],"content":" 解决Hexo无法显示图片的方案 ​ 我们在使用markdown编写博客时我们习惯将图片保存到本地，使用‘![]{}’的格式+相对路径去插入图片，但是在使用hexo d的时候相对路径会被转换导致最后发布上去的博客图片无法查看，下面提供解决方案： _config.yml中post_asset_folder属性置为true (打开资源文件夹) 当资源文件管理功能打开后，Hexo将会在你每一次通过hexo new &lt;title&gt;命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 但是这样设置后，只能用下面这种方式来引入图片 这种方式，我们在VScode或者Typora编写文档的时候是无法查看到图片的，无法渲染。 为了解决无法渲染和不习惯的图片插入格式，可以使用hexo-asset-image。 在根目录安装hexo-asset-image，就能按照markdown的格式进行图片的插入。 如果未生效，则清除hexo缓存，然后生成网页，再打开或者部署网站 "},{"title":"基于Flutter3.x实战跨平台短视频App混合开发","date":"2023-10-23T14:19:39.898Z","url":"/2023/10/23/%E5%9F%BA%E4%BA%8EFlutter3-x%E5%AE%9E%E6%88%98%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9F%AD%E8%A7%86%E9%A2%91App%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/","categories":[["undefined",""]],"content":" 基于Flutter3.x实战跨平台短视频App混合开发 第一章 Flutter整体介绍 1.Flutter技术发展概述 什么是Flutter 由Google研发 一款应用程序SDK 一份代码可以同时生成IOS和Android/Mac/Windows等多个高性能，高保真的应用程序。 为什么要用 极大提升开发效率 创建美观，高度定制且统一的用户体验 性能接近Native 怎么用 原生App + Flutter plugin Flutte App Flutter App + 原生接口 核心原则 Everything is widget StatelessWidget StatefulWidget 2.Flutter整体框架结构 ​ 3.为什么选择Dart语言 2011年发布，目的是取代JavaScript 符合Flutter构建UI的方式。第一个使用声明式UI。 支持JIT(Just In Time)和AOT(Ahead Of Time) 有内存安全保证，降低了安全漏洞风险。 面向对象的编程语言(类似Java/OC；不同于JavaScript) 强类型语言 线程模型 async和await异步编程 4.Dart线程模型 当发生了异常没有被捕获时，程序并不会直接退出，只会导致当前的任务执行失败，后续代码不会执行。 但是它如果crash之后或者异常之后会去执行任务队列当中的下一个任务，这样的话就可以保证每个任务之间是独立的，也就是你一个任务的异常或者崩溃等一些问题，并不会影响到其它任务，可以让每个任务之间相互独立，在一定程度上也提高了我们程序的稳定性。 5.Dart线程管理 6.Dart异步编程 async-await代码块是对Future API的简化形式，将异步回调代码写成同步代码 async关键字修饰的函数返回一个Future对象，故async不会阻塞当前线程 await关键字会同步执行，阻塞当前线程 Tips： 要定义异步函数，需要在函数主体之前添加async关键字 await关键字只有在async关键字修饰的函数才会有效 eg： ​ 7.Dart总结 符合Flutter声明式UI的布局方式 线程模型： 微任务队列和事件队列 线程管理：4个不同的Runner Thread async和await异步编程 8.Flutter工程结构 创建工程 同时还可以使用IDE来创建。 配置文件与依赖管理 9.布局方式及差异 两种不同的编程范式 命令式UI：UI界面由一个个命令操作组合而成 声明式UI：将想要的UI描述出来即可 声明式UI优点： 更适合做多设备适配 UI布局和控制逻辑通过reactive方式实现数据绑定 更好实现UI局部刷新机制，只刷新更新的部分 10.什么是Widget？ 官方解释 ​ A widget is an immutable description of a part of a user interface. 翻译： ​ Widget是部分UI的不可变描述信息 重点： ​ Widget是不可变的！！！ State更新方式 通过State.setState()触发重布局 遍历需要更新的Element，依次调用rebuild 结论：StatelessWidget和StatefulWidget差别在于是否能自重建 11.生命周期 第二章 开发工具安装及环境搭建 1.常用开发工具 VSCode XCode Android Studio 2.Flutter SDK下载及安装 Flutter官网 查看全部的版本 切换版本 更新path环境变量 运行flutter doctor 3.Android Studio安装及配置 Tips Android Studio官网 windows下载好安装包后，进行无脑安装 安装完成后，点plugins然后安装Flutter和Dart两个插件 重启，然后再setting里面搜android sdk看是否安装过一个版本，安装过即不管，未安装则安装一个版本。(最新版本的Android Studio在安装时就需要安装Android SDK) 第三章 Flutter实现混合式开发 1.为什么需要混合开发 双端功能隔离 需要原生能力 现有陈旧原生项目 Flutter很好的支持了以独立页面，甚至可以通过UI片段的方式集成到现有的应用中，即所谓的混合开发模式。"},{"title":"个人博客的搭建","date":"2023-10-22T12:52:23.562Z","url":"/2023/10/22/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","categories":[["undefined",""]],"content":" 个人博客的搭建 1. 安装Git和Node.js 2. 安装Hexo 下载并安装Hexo 本地新建一个用于安装博客的文件夹 进入hexo文件夹，然后cmd打开终端，然后打开hexo官网，翻到最下面的新建博客命令 访问本地4000端口即可访问博客网站 3.编辑个人博客 新建博客 在当前博客文件夹中打开终端输入下面命令 查看博客 在source–&gt;_posts中看到博客文章 生成网页 运行博客 4.更改博客样式 hexo官网里面找到主题，然后选择一个主题。 进入这个主题的github网站主页，向下滑动就能看到这个博客的配置指南。 按照指南安装这个主题。 安装完成后，在themes文件夹中复制主题的名称，打开博客的_config.yml文件。 将底部的theme名称进行替换。 然后终端输入 hexo g 生成网页内容。 再输入 hexo s 运行hexo。 5.修改主题配置 进入对应主题的_config.yml文件进行需求修改。 进入博客根目录的_config.yml文件 ,修改# Site 的title and so on。 6.注册Gitee账号 进行实名认证 点击新建博客，填写完成后，点击创建 7.将博客上传到Gitee中 复制 Git全局设置，在终端运行 生成ssh公钥 复制密钥，将密钥粘贴在gitee设置的ssh公钥里 打开博客根目录的_config.yml文件，在最底部的 deploy 中 安装部署插件 生成网页内容 部署博客 进入仓库，查看刚才创建的项目是否代码文件已上传成功。 点击服务，再点击Gitee Pages ，再点击强制使用HTTPS，点击启动 复制网站地址，打开。部署博客成功！ 8.GitHub Pages搭建 新建一个仓库,仓库名为 “username”.github.io (固定写法) 复制项目的地址到博客根目录的_config.yml文件中 生成网页内容 部署博客 点击仓库的Settings 点击左侧的Pages 然后在 Branch 中选择需要展示的分支。假如只有一个分支的话，则选择master分支，然后保存 浏览器输入博客访问地址，即可访问成功 9.更新博客 每次我们在本地修改完博客后，打开终端，运行 hexo g 生成网页，hexo s 运行本地服务器。 先在本地查看修改的样式是否满意，再将网页部署到gitee中 hexo d 然后打开gitee，在Pages服务中点击更新，这样博客就会发生变化。 如果博客没有发生改变，输入 hexo clean 清理缓存文件，然后再输入 hexo g 生成网页，再输入 hexo d 重新部署一遍。 如果还未发生改变，清除一下浏览器的缓存。 "},{"title":"Hexo更换MarkDown渲染器","date":"2023-10-22T12:32:38.671Z","url":"/2023/10/22/Hexo%E6%9B%B4%E6%8D%A2MarkDown%E6%B8%B2%E6%9F%93%E5%99%A8/","categories":[["undefined",""]],"content":" 常见的几个渲染器 hexo-renderer-marked：hexo默认的渲染器不支持复杂的数学公式 hexo-renderer-kramed：支持复杂的数学公式，mathjax的渲染方式 hexo-renderer-markdown-it：取代第一个的渲染器，渲染更快，更符合CommonMark规则 hexo-renderer-markdown-it-katex：跟上一个差不多，但是不用设置就支持katex hexo-renderer-markdown-it-plus：好用，可以自己决定是否要渲染katex公式,此外能渲染的东西多，但是已经不维护了 @upupming/hexo-renderer-markdown-it-plus ：上一个的升级版,好用,支持的功能多。 hexo 更换 markdown渲染器 @upupming/hexo-renderer-markdown-it-plus 1.卸载原来的渲染器 2.下载新渲染器 "},{"title":"Typora的简单使用教程","date":"2023-10-21T14:49:21.247Z","url":"/2023/10/21/Typora/","categories":[["undefined",""]],"content":"这是Typora的简单使用教程. markdown的使用说明 一、标题 语法：# (一级标题) ## (二级标题) ### (三级标题) … 代码： 效果: 这是一级标题 这是二级标题 快捷键: ctrl + 数字1~6可以快速将选中的文本调成对应级别的标题 ctrl + 0可以快速将选中的文本调成普通文本 ctrl + 加号/减号 对标题级别进行加减 二、段落 1、换行 代码: 效果: 这是一个段落 这是一个段落 2、分割线 语法: — 或者 *** 代码: 效果: 三、文字显示 1、字体 语法: 粗体: 用一对双星号包裹 删除线: 用一对双波浪线包裹 内 下划线: 用一对u标签包裹 斜体: 用一对单星号包裹 高亮: 用一对双等号包裹 代码: 效果: 这是粗体 这是删除线 这是下划线 这是斜体 这是高亮 快捷键: 加粗: ctrl + B 删除线: shift + alt + 5 下划线: ctrl + U 斜体: ctrl + I (i的大写) 2、上下标 代码: 效果: x2 H2O 四、列表 1、无序列表 代码: 效果: 1.只有同一级别: 苹果 香蕉 橘子 2.子集类: 一级分类 二级分类 三级分类 快捷键: ctrl + shift + ] 2、有序列表 代码: 效果: 第一个标题 第二个标题 第三个标题 子内容1 子内容2 第四个标题 快捷键: ctrl + shift + [ 3、任务列表 代码: 效果: [ ] 吃早餐 [x] 背单词 五、区块显示 代码: 效果: 这是最外层 这是内层区块 这是最内层区块 六、代码显示 1、行内代码 代码: 效果: int a = 0; 快捷键: ctrl + shift + ` 2、代码块 代码: 快捷键: ctrl + shift + K 七、链接 代码: 效果: www.baidu.com 百度一下 百度一下 快捷键: ctrl + K 八、脚注 说明: 对文本进行解释说明 代码: 效果: 这是一个非常牛逼的故事[1] 九、图片插入 代码: 效果: 快捷键: ctrl + shift + I (i的大写) 十、表格 代码: 效果: 1 2 3 4 5 6 7 8 9 10 11 12 快捷键: ctrl + T 十一、表情符号 代码: 效果: :happy: 😢 👨 十二、数学公式的输入 1、公式的插入 ①行中公式 代码: 效果: 公式公式公式 ②独立公式 代码: 效果: 公式公式 公式 2、上下标 代码: 效果: xyz=(1+ex)−2xywx^{y^z}=(1+e^x)^{-2xy^w}xyz=(1+ex)−2xyw \\sideset{^1_2}{^3_4}{\\underset{6}\\bigotimes} 3、括号和分隔符 代码: ⟨⟩⌈⌉⌊⌋{}∥∥\\langle\\quad\\rangle\\quad\\lceil\\quad\\rceil\\quad\\lfloor\\quad\\rfloor\\quad\\lbrace\\quad\\rbrace\\quad\\lVert\\quad\\rVert⟨⟩⌈⌉⌊⌋{}∥∥ f(x,y,z)=3y2z(3+7x+51+y2)f(x,y,z)=3y^2z\\left(3+\\dfrac{7x+5}{1+y^2}\\right)f(x,y,z)=3y2z(3+1+y27x+5​) dudx∣x=0\\left.\\dfrac{\\mathrm{d}u}{\\mathrm{d}x}\\right|_{x=0}dxdu​∣∣∣∣​x=0​ 4、分数 代码: 效果: ababab\\frac{a}{b}\\quad\\dfrac{a}{b}\\quad {a\\over b}ba​ba​ba​ 5、开方 代码: 效果: 被开方数根指数,省略时为2\\sqrt[根指数,省略时为2]{被开方数}根指数,省略时为2被开方数​ 6、省略号 代码: 效果: ⋯…⋮⋱\\cdots\\quad\\ldots\\quad\\vdots\\quad\\ddots⋯…⋮⋱ 十三、支持的HTML元素 1、文本居中 代码: 效果: 内容 2、快捷键显示 代码: 效果: 内容 3、加粗 代码: 效果: 加粗 4、倾斜 代码: 效果: 倾斜 5、上下标 代码: 效果: 开始123hi你好 开始321hi你好 6、填充的黑色箭头 代码： 效果: ➤ 天道酬勤 ↩︎ "},{"title":"Hello World","date":"2023-10-20T06:50:25.896Z","url":"/2023/10/20/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]